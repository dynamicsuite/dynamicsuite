#!/usr/bin/env php
<?php
/*
 * Dynamic Suite
 * Copyright (C) 2020 Dynamic Suite Team
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation version 3.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software Foundation,
 * Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301  USA
 */

namespace DynamicSuite;
use PDOException;

set_time_limit(0);
ini_set('memory_limit', -1);

require_once realpath(__DIR__ . '/create_instance.php');

/** @var Instance $ds */

// Print command usage
function printUsage(): void
{
    CLI::out('Usage: ./users [-fhlcmdg] [options ...]');
    CLI::out('Options:');
    CLI::out('  -f                            Force "YES" at all prompts');
    CLI::out('  -h, --help                    Display this help');
    CLI::out('  -l, --list                    List all users');
    CLI::out('  -c, --create                  Create a user');
    CLI::out('  -m, --modify [string]         Modify a user');
    CLI::out('  -d, --delete [string]         Delete a user');
    CLI::out('  --audit-groups [string]       Audit a users groups');
    CLI::out('  --audit-permissions [string]  Audit a users permissions');
    CLI::out('  -g, --groups [string]         Modify groups for a user');
    CLI::out('  --add [string]                Add a group to a user');
    CLI::out('  --remove [string]             Remove a group from a user');
    CLI::out('  --clear                       Clear all groups from a user');
    CLI::out('  --reset-login [string]        Reset login attempts for a user');
}

// Make sure cached data is synced
function syncCache(): void
{
    if (!DS_APCU) {
        CLI::out('Caching not enabled, skipping sync');
        return;
    }
    CLI::out('Cached data has been changed');
    if (CLI::yn('Restart apache and reset cache?')) {
        $err = exec('apachectl restart');
        if ($err) CLI::err($err);
    }
}

/** @var Instance $ds */
$options = getopt('fhlcm:d:g:', [
    'help',
    'list',
    'create',
    'modify:',
    'delete:',
    'audit-groups:',
    'audit-permissions:',
    'groups:',
    'add:',
    'remove:',
    'clear',
    'reset-login:'
]);

// Show help
if (CLI::actionIs(['h', 'help'], $options)) {
    printUsage();
}

// List users
elseif (CLI::actionIs(['l', 'list'], $options)) {
    try {
        $data = $ds->db->query((new Query())->select()->from('ds_users'));
        CLI::out(CLI::table([
            'username',
            'inactive',
            'inactive_time',
            'created_by',
            'created_on',
            'login_attempts',
            'login_last_attempt',
            'login_last_success',
            'login_last_ip'
        ], $data));
    } catch (PDOException $exception) {
        CLI::err($exception->getMessage());
    }
}

// Create a user
elseif (CLI::actionIs(['c', 'create'], $options)) {
    $username = CLI::in('Username');
    $password = CLI::in('Password');
    $inactive = CLI::yn('User Inactive?');
    try {
        $user = new User();
        $user->setUsername($username);
        $user->changePassword($password);
        $user->setInactive($inactive);
        if ($inactive) $user->setInactiveTime(date('Y-m-d H:i:s'));
        $ds->users->create($user);
        $ds->events->create((new Event())
            ->setPackageId('dynamicsuite')
            ->setType(300)
            ->setAffected($user->username)
            ->setMessage('User created')
        );
        syncCache();
        CLI::out("User added: $user->username");
    } catch (PDOException $exception) {
        CLI::err($exception->getMessage());
    }
}

// Modify a user
elseif (CLI::actionIs(['m', 'modify'], $options)) {
    $username = isset($options['m']) && is_string($options['m'])
        ? $options['m']
        : $options['modify'];
    try {
        if (!$user = $ds->users->find($username)) {
            CLI::err('User not found');
        }
        $user->setUsername(CLI::in('Username', $user->username));
        $password = CLI::in('Password (Enter for no change)');
        if (!empty($password)) {
            $user->changePassword($password);
        }
        if ($user->pending_inactive && CLI::yn('Activate?')) {
            $user->setInactive(false);
        } elseif (!$user->pending_inactive && CLI::yn('Deactivate?')) {
            $user->setInactive(true);
        }
        $ds->users->modify($user);
        $ds->events->create((new Event())
            ->setPackageId('dynamicsuite')
            ->setType(301)
            ->setAffected($user->username)
            ->setMessage('User modified')
        );
        syncCache();
        CLI::out("User updated: $user->username");
    } catch (PDOException $exception) {
        CLI::err($exception->getMessage());
    }
}

// Delete a user
elseif (CLI::actionIs(['d', 'delete'], $options)) {
    $username = isset($options['d']) && is_string($options['d'])
        ? $options['d']
        : $options['delete'];
    try {
        if (!$user = $ds->users->find($username)) {
            CLI::err('User not found');
        }
        if (!CLI::yn("Delete user?")) {
            CLI::err('Cancelling');
        }
        $ds->users->delete($user);
        $ds->events->create((new Event())
            ->setPackageId('dynamicsuite')
            ->setType(302)
            ->setAffected($user->username)
            ->setMessage('User deleted')
        );
        syncCache();
        CLI::out('User deleted');
    } catch (PDOException $exception) {
        CLI::err($exception->getMessage());
    }
}

// Audit a users groups
elseif (CLI::actionIs('audit-groups', $options)) {
    try {
        if (!$user = $ds->users->find($options['audit-groups'])) {
            CLI::err('User not found');
        }
        $data = $ds->db->query((new Query())
            ->select()
            ->from('ds_view_user_groups')
            ->where('user_id', '=', $user->id)
        );
        CLI::out(CLI::table([
            'name',
            'description'
        ], $data));
    } catch (PDOException $exception) {
        CLI::err($exception->getMessage());
    }
}

// Audit a users permissions
elseif (CLI::actionIs('audit-permissions', $options)) {
    try {
        if (!$user = $ds->users->find($options['audit-permissions'])) {
            CLI::err('User not found');
        }
        $data = $ds->db->query((new Query())
            ->select()
            ->from('ds_view_user_permissions')
            ->where('user_id', '=', $user->id)
        );
        CLI::out(CLI::table([
            'package_id',
            'name',
            'description'
        ], $data));
    } catch (PDOException $exception) {
        CLI::err($exception->getMessage());
    }
}

// Modify a user's groups
elseif (CLI::actionIs(['g', 'groups'], $options)) {
    $username = isset($options['g']) && is_string($options['g'])
        ? $options['g']
        : $options['groups'];
    try {
        if (!$user = $ds->users->find($username)) {
            CLI::err('User not found');
        }
        if (isset($options['add'])) {
            /** @var Group $group */
            if (!$group = $ds->groups->find($options['add'])) {
                CLI::err('Group not found');
            }
            $ds->users->addGroup($user, $group);
            $ds->events->create((new Event())
                ->setPackageId('dynamicsuite')
                ->setType(350)
                ->setAffected($user->username)
                ->setMessage("User added to group $group->name")
            );
        } elseif (isset($options['remove'])) {
            /** @var Group $group */
            if (!$group = $ds->groups->find($options['remove'])) {
                CLI::err('Group not found');
            }
            $ds->users->removeGroup($user, $group);
            $ds->events->create((new Event())
                ->setPackageId('dynamicsuite')
                ->setType(351)
                ->setAffected($user->username)
                ->setMessage("User removed from group $group->name")
            );
        } elseif (isset($options['clear'])) {
            $ds->users->replaceGroups($user, []);
            $ds->events->create((new Event())
                ->setPackageId('dynamicsuite')
                ->setType(353)
                ->setAffected($user->username)
                ->setMessage('Groups replaced')
            );
        } else {
            CLI::err('Missing flags for group modification', false);
            printUsage();
            exit;
        }
    } catch (PDOException $exception) {
        CLI::err($exception->getMessage());
    }
}

// Reset a user's login attempts
elseif (CLI::actionIs('reset-login', $options)) {
    $username = $options['reset-login'];
    try {
        if (!$user = $ds->users->find($username)) {
            CLI::err('User not found');
        }
        $user->setLoginAttempts(0);
        $ds->users->modify($user);
        syncCache();
        CLI::out('Login attempts reset');
    } catch (PDOException $exception) {
        CLI::err($exception->getMessage());
    }
}

// Missing arguments
else {
    CLI::err('Invalid usage', false);
    printUsage();
}