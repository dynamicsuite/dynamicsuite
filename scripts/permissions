#!/usr/bin/env php
<?php
/*
 * Dynamic Suite
 * Copyright (C) 2020 Dynamic Suite Team
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation version 3.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software Foundation,
 * Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301  USA
 */

namespace DynamicSuite;
use PDOException;

set_time_limit(0);
ini_set('memory_limit', -1);

require_once realpath(__DIR__ . '/create_instance.php');

/** @var Instance $ds */

// Print command usage
function printUsage(): void
{
    CLI::out('Usage: ./permissions [-fhlcmd]');
    CLI::out('Options:');
    CLI::out('  -f                     Force "YES" at all prompts');
    CLI::out('  -h, --help             Display this help');
    CLI::out('  -l, --list             List all permissions');
    CLI::out('  -c, --create           Create a permission');
    CLI::out('  -m, --modify [string]  Modify a permission');
    CLI::out('  -d, --delete [string]  Delete a permission');
}

// Make sure cached data is synced
function syncCache(): void
{
    if (!DS_APCU) {
        CLI::out('Caching not enabled, skipping sync');
        return;
    }
    CLI::out('Cached data has been changed');
    if (CLI::yn('Restart apache and reset cache?')) {
        $err = exec('apachectl restart');
        if ($err) CLI::err($err);
    }
}

/** @var Instance $ds */
$options = getopt('fhlcm:d:', ['help', 'list', 'create', 'modify:', 'delete:']);

// Show help
if (CLI::actionIs(['h', 'help'], $options)) {
    printUsage();
}

// List permissions
elseif (CLI::actionIs(['l', 'list'], $options)) {
    try {
        $data = $ds->db->query((new Query())->select()->from('ds_permissions'));
        CLI::out(CLI::table([
            'package_id',
            'name',
            'description'
        ], $data));
    } catch (PDOException $exception) {
        CLI::err($exception->getMessage());
    }
}

// Create permissions
elseif (CLI::actionIs(['c', 'create'], $options)) {
    try {
        $permission = new Permission();
        $permission->setPackageId(CLI::in('Package ID'));
        $permission->setName(CLI::in('Name'));
        $permission->setDescription(CLI::in('Description'));
        $ds->permissions->create($permission);
        syncCache();
        CLI::out("Permission added: $permission->shorthand");
    } catch (PDOException $exception) {
        CLI::err('Permission not added', false);
        CLI::err($exception->getMessage());
    }
}

// Modify permissions
elseif (CLI::actionIs(['m', 'modify'], $options)) {
    $shorthand = isset($options['m']) && is_string($options['m'])
        ? $options['m']
        : $options['modify'];
    try {
        /** @var Permission $permission */
        if (!$permission = $ds->permissions->find($shorthand)) {
            CLI::err('Permission not found');
        }
        $permission->setPackageId(CLI::in('Package ID', $permission->package_id));
        $permission->setName(CLI::in('Name', $permission->name));
        $permission->setDescription(CLI::in('Description', $permission->description));
        $ds->permissions->modify($permission);
        syncCache();
        CLI::out("Permission updated: $permission->shorthand");
    } catch (PDOException $exception) {
        CLI::err('Permission not updated', false);
        CLI::err($exception->getMessage());
    }
}

// Delete permissions
elseif (CLI::actionIs(['d', 'delete'], $options)) {
    $shorthand = isset($options['d']) && is_string($options['d'])
        ? $options['d']
        : $options['delete'];
    try {
        /** @var Permission $permission */
        if (!$permission = $ds->permissions->find($shorthand)) {
            CLI::err('Permission not found');
        }
        $ds->permissions->delete($permission);
        syncCache();
        CLI::out("Permission deleted: $permission->shorthand");
    } catch (PDOException $exception) {
        CLI::out('Permission not deleted');
        CLI::out($exception->getMessage());
    }
}

// Missing arguments
else {
    CLI::err('Invalid usage', false);
    printUsage();
}