#!/usr/bin/env php
<?php
/*
 * Dynamic Suite
 * Copyright (C) 2020 Dynamic Suite Team
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation version 3.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software Foundation,
 * Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301  USA
 */

namespace DynamicSuite;

set_time_limit(0);
ini_set('memory_limit', -1);

// Create environment
require_once realpath(__DIR__ . '/create_environment.php');

/** @var Instance $ds */

CLI::out('Running environment checks');

// Check for linux
CLI::out('Checking for compatible OS...', false);
$uname = php_uname('s');
if ($uname !== 'Linux' && $uname !== 'Darwin') {
    CLI::out('FAILED');
    CLI::err("Linux or MacOS OS is required, found: $uname");
} else {
    CLI::out('OK');
}

// Check for Apache
CLI::out('Checking for Apache...', false);
if (exec('which apachectl') === '') {
    CLI::out('FAILED');
    CLI::err('Apache and apachectl are required for Dynamic Suite CLI');
    exit;
} else {
    CLI::out('OK');
}

// Check for apache errors
CLI::out('Checking for Apache errors...', false);
$check_apache_error = exec('apachectl -M 2>&1 >/dev/null');
if ($check_apache_error) {
    CLI::out('FAILED');
    CLI::err($check_apache_error);
} else {
    CLI::out('OK');
}

// Check for Apache rewrite
CLI::out('Checking for Apache rewrite...', false);
if (exec("apachectl -M 2>/dev/null | grep 'rewrite'") === '') {
    CLI::out('FAILED');
    CLI::err('Apache rewrite module is required for Dynamic Suite');
} else {
    CLI::out('OK');
}

// Check for MySQL
CLI::out('Checking for MySQL...', false);
if (exec('which mysql 2>/dev/null') === '') {
    CLI::out('FAILED');
    CLI::err('MySQL required for Dynamic Suite CLI');
} else {
    CLI::out('OK');
}

CLI::out('All Checks Complete!');

// Setup vHost
if (CLI::yn('Setup Apache vHost?')) {

    // Gather vhost information
    $listen_addr = CLI::in('Listen IP address', '*');
    $listen_port = CLI::in('Listen port', '80');
    $hostname = '';
    while (!$hostname) $hostname = trim(CLI::in('Hostname'), '/');
    $install_path = CLI::in('Install path', getcwd());

    // Load and update template
    CLI::out('Generating config...');
    $template = file_get_contents('apache/default_vhost.conf');
    if (!$template) {
        CLI::err('Could not get apache vhost template');
    }
    $template = str_replace('{{listen_addr}}', $listen_addr, $template);
    $template = str_replace('{{listen_port}}', $listen_port, $template);
    $template = str_replace('{{hostname}}', $hostname, $template);
    $template = str_replace('{{path}}', $install_path, $template);
    CLI::out('Config generated!');

    // Confirm paths
    $available_path = CLI::in('vHost available path');
    $enabled_path = CLI::in('vHost enabled path');
    $available_vhost = "$available_path/$hostname.conf";
    $enabled_vhost = "$enabled_path/$hostname.conf";

    // vHost in use
    if (file_exists($available_vhost) || file_exists($enabled_vhost)) {
        if (CLI::in('File already exists, replace? [Y/n]') == 'y') {
            if (file_exists($available_vhost) && !unlink($available_vhost))
                CLI::err('Error unlinking vhost');
            if ((is_link($enabled_vhost) || file_exists($enabled_vhost)) && !unlink($enabled_vhost))
                CLI::err('Error unlinking vhost');
        } else {
            CLI::err('vHost already in use!');
        }
    }

    // Write vHost config
    CLI::out("Writing vHost as \"$available_vhost\"...", false);
    if (!is_dir($available_path) && !mkdir($available_path)) {
        CLI::out('FAILED');
        CLI::err("Failed to create directory: $available_path");
    }
    if (!file_put_contents($available_vhost, $template)) {
        CLI::out('FAILED');
        CLI::err("Error writing vHost to \"$available_vhost\"");
    } else {
        CLI::out('OK');
    }

    // Enable vHost
    if (CLI::yn('Enable site and restart apache?')) {
        CLI::out("Finalizing vHost for $hostname...");
        $link_command = "ln -s \"$available_vhost\" \"$enabled_vhost\" 2>&1 >/dev/null";
        $error_link = exec($link_command);
        $error_restart = exec("apachectl restart 2>&1 >/dev/null");
        if ($error_link) {
            CLI::err("vHost link error: $error_link", false);
            CLI::err('VHOST SETUP FAILED!');
        } elseif ($error_restart) {
            unlink($enabled_vhost);
            CLI::err("Apache restart error: $error_restart", false);
            CLI::err('vHost has been unlinked!', false);
            CLI::err('VHOST SETUP FAILED!');
        } else {
            CLI::out('Apache vHost finalized!');
        }
    }

}

// Setup database
if (CLI::yn('Setup database?')) {

    // Install only settings
    $install_user = CLI::in('MYSQL username for installation operations', 'root');
    $install_pass = CLI::in('MYSQL password for installation operations', '');
    $command = "mysql --user=\"$install_user\" --password=\"$install_pass\" ";

    // Generate database credentials
    $database = CLI::in('Database name');
    $host = CLI::in('Database host', 'localhost');
    $username = CLI::in('Database username', $database);
    $chars = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789';
    $password = substr(str_shuffle($chars), 0, 32);
    $password = CLI::in('Database password', $password);
    $command .= "--host=\"$host\" --execute=";

    // Create database
    CLI::out('Creating database...');
    $err = exec("$command'CREATE DATABASE `$database`' 2>&1 >/dev/null");
    if ($err) CLI::err($err);

    // Create user
    CLI::out('Creating user...');
    $err = exec("$command\"CREATE USER '$username'@'$host' IDENTIFIED BY '$password'\" 2>&1 >/dev/null");
    if ($err) CLI::err($err);

    // Grant user access
    CLI::out('Granting user access...');
    $err = exec("$command\"GRANT ALL ON $database.* TO '$username'@'$host'\"  2>&1 >/dev/null");
    if ($err) CLI::err($err);

    // Create tables
    CLI::out('Creating tables...');
    $tables_script = getcwd() . '/sql/create_tables.sql';
    $err = exec(
        "mysql " .
        "--user=\"$username\" " .
        "--password=\"$password\" " .
        "--database=\"$database\" " .
        "< \"$tables_script\"");
    if ($err) CLI::err($err);

    // Write config
    $config['db_dsn'] = "mysql:host=$host;dbname=$database";
    $config['db_user'] = $username;
    $config['db_pass'] = $password;
    if (
        file_exists('config/dynamicsuite.json') &&
        $json = json_decode(file_get_contents('config/dynamicsuite.json'), true)
    ) $config = array_replace($json, $config);
    $err = file_put_contents('config/dynamicsuite.json', json_encode($config, JSON_PRETTY_PRINT));
    if (!$err) CLI::err('Error writing to config file');

    CLI::out('Database setup complete!');

}

CLI::out('Dynamic Suite setup complete!');

if (isset($hostname)) {
    CLI::out("You can view your instance at $hostname");
}